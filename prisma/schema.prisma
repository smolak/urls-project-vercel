datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

model Account {
  id                       String   @id
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.VarChar(500)
  access_token             String?  @db.VarChar(500)
  refresh_token_expires_in Int?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.VarChar(250)
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?  @db.VarChar(250)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id
  sessionToken String   @unique @db.VarChar(250)
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UrlQueueStatus {
  NEW
  ACCEPTED
  REJECTED
}

model UrlQueue {
  id           String         @id
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  // Not unique here to fetch it even if it was potentially added to the Url table
  // in order to update the data.
  url          String         @db.VarChar(2000)
  status       UrlQueueStatus @default(NEW)
  attemptCount Int            @default(0) @db.UnsignedTinyInt
  // User will be notified if something went wrong
  // also it will be used later to populate the UserUrl table
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
}

model Url {
  id          String    @id
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  url         String    @db.VarChar(2000)
  // Reserved for SHA1 hash - required as 2k long URLs will create too long index keys
  // ones, that are too long for MySQL engine to even work
  urlHash     String    @unique @db.Char(40)
  title       String
  description String
  faviconUrl  String    @db.VarChar(2000)
  imageUrl    String    @db.VarChar(2000)
  UserUrl     UserUrl[]
}

model UserUrl {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  url       Url      @relation(fields: [urlId], references: [id])
  urlId     String
  createdAt DateTime @default(now())

  @@id([userId, urlId])
}

model User {
  id            String     @id
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  name          String?
  email         String?    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          String?    @default("user")
  apiKey        String?    @unique
  accounts      Account[]
  sessions      Session[]
  UrlQueue      UrlQueue[]
  UserUrl       UserUrl[]
}

model VerificationToken {
  identifier String
  token      String   @unique @db.VarChar(500)
  expires    DateTime

  @@unique([identifier, token])
}
